"""
Collector is a transitional container for the data flow between the processes.
It takes in vertices and edges generated by the frontend, and then pass them 
to the backend.
"""

from queue import Queue
from core.graph.graph import GraphEdge, GraphVertex


class Collector:
    """
    As a transitional container. It is thread-safe.
    """

    class Bucket:
        def __init__(self, vertex_bucket: Queue, edge_bucket: Queue):
            self.vertex_bucket: Queue = vertex_bucket
            self.edge_bucket: Queue = edge_bucket

        def vertex_count(self):
            """
            Get approximate vertex count.
            """
            return self.vertex_bucket.qsize()

        def edge_count(self):
            """
            Get approximate edge count.
            """
            return self.edge_bucket.qsize()

        def seal_vertex(self):
            """
            Seal the vertex bucket by adding a sentinel value.
            """
            self.vertex_bucket.put(None)

        def seal_edge(self):
            """
            Seal the edge bucket by adding a sentinel value.
            """
            self.edge_bucket.put(None)

        def seal(self):
            self.seal_vertex()
            self.seal_edge()

    class Source(Bucket):
        """
        As a source to get vertices and edges from.
        """

        def __init__(self, vertex_bucket: Queue, edge_bucket: Queue) -> None:
            super().__init__(vertex_bucket, edge_bucket)

        def get_vertex(self) -> GraphVertex:
            return self.vertex_bucket.get()

        def get_edge(self) -> GraphEdge:
            return self.edge_bucket.get()

    class Sink(Bucket):
        """
        As a sink to put vertices and edges into.
        """

        def __init__(self, vertex_bucket: Queue, edge_bucket: Queue) -> None:
            super().__init__(vertex_bucket, edge_bucket)

        def put_vertex(self, vertex: GraphVertex):
            self.vertex_bucket.put(vertex)

        def put_edge(self, edge: GraphEdge):
            self.edge_bucket.put(edge)

    def __init__(self) -> None:
        self._vertex_bucket = Queue()
        self._edge_bucket = Queue()
        self._source = Collector.Source(self._vertex_bucket, self._edge_bucket)
        self._sink = Collector.Sink(self._vertex_bucket, self._edge_bucket)

    def as_source(self):
        return self._source

    def as_sink(self):
        return self._sink
